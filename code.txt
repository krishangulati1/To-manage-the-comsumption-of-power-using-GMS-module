#include <SoftwareSerial.h>
#include <LiquidCrystal.h>
#include <TimerOne.h>
SoftwareSerial gsm(3, 4);
LiquidCrystal lcd(5, 6, 7, 8, 9, 10);
float x = 9.9;
#define RECEIVINGCALL 1
#define IDLE 2
#define BUSY 3
#define NO_ANSWER 4
#define TALKING 5
#define ERROR 6

#define Pin "pin"
#define ok "OK"
#define ERROR_str "ERROR"
#define Connected "Connected"
#define Connecting "connecting"
#define CLCC "+CLCC:"
#define atCLCC "AT+CLCC"
#define CMGF "AT+CMGF=1"
#define CMGL "+CMGL:"
#define CMGS "AT+CMGS=\""
#define CMGD "AT+CMGD="
#define UNREAD "AT+CMGL=\"REC UNREAD\""
#define CMGDA "AT+CMGDA=\"DEL ALL\""
#define CNMI "AT+CNMI=0,0,0,0"

boolean gsm_connect = false;
boolean notConnected = true;
int no_configured = 0;
unsigned long current_time ;
String numtel;
String msg = "";
String indata = "";
String inputString = "";
String msg_index;
int index1;
int index2;
String call_number, num;
String sms_num, sms; // = get_sender_number();
float tempC;
int reading;

long time1;
long time2;
int beats, last_rate;
int smssend = 0;

//byte oldSample, sample;
unsigned int oldSample, sample;
int count = 0;
//int x = 30;
int y = 120;
unsigned long pulse;
unsigned int i = 1;
long measurementStartTime = 0;
int e_chk1 = 0;
int e_chk2 = 0;
int menu = 1;
int menu_sel = 1;
const int entr = 11;
const int bck = 12;
const int up = 13;
const int dwn = A0;
const int meter_pulse = 2;
const int load1 = A5;
const int load2 = A4;
const int load3 = A3;
const int load4 = A2;


double estimated_uses;
double estimated_cost;
volatile double cost;
volatile double unit;
volatile double current_use = 0;
volatile double last_use = 0;
volatile double total_use = 0;
volatile int sec = 0, trigger = 0, pulse_time;

boolean valid_sms;

char c, char1[10], char2[10];
String str = "";
//String msg = "";
int load1_satus = 0;
int load2_satus = 0;
int load3_satus = 0;
int load4_satus = 0;


/*
  int distress = 0;
  int ret = 0;
  unsigned long lasttime=0;
  unsigned long interval=60000;
  unsigned long currenttime=0;

  float lat_int;
  float lon_int;

  String lat="lattitude=";
  String lon="\nlongitude=";
  String site="\nhttp://maps.google.com/maps?f=q&q=";
  String help1="Soldier need help\n";

  const int buzzer = 4;
  const int tempPin = A5;
  const int HR_RX = 9;
  const int HELP = 5;
  const int entr=6;
  const int bck=7;
  const int up=8;
  const int dwn=12;     // the number of the pushbutton pin
*/
void setup()
{
  lcd.begin(16, 2);
  gsm.begin(9600);
  Serial.begin(9600);
  Serial.println("hii");
  pinMode(entr, INPUT);
  pinMode(bck, INPUT);
  pinMode (up, INPUT);
  pinMode (dwn, INPUT);
  pinMode (load1, OUTPUT);
  pinMode (load2, OUTPUT);
  pinMode (load3, OUTPUT);
  pinMode (load4, OUTPUT);
  digitalWrite(load1, LOW);
  digitalWrite(load2, LOW);
  digitalWrite(load3, LOW);
  digitalWrite(load4, LOW);
  //lcd.clear();
  lcd.clear();
  lcd.print(F("connecting to "));
  lcd.setCursor(0, 1);
  lcd.print(F("gsm"));
  while (1)
  {
    if (connect_gsm())
    {
      lcd.clear();
      lcd.print(Connected);
      Serial.println(F("GSM connected"));
      break;
    }
  }
  delay(2000);
  lcd.clear();
  lcd.print(F("Waiting for call"));
  while ((no_configured != 1))
  {
    switch (call_status())
    {
      case IDLE: // Nothing is happening
        break;

      case RECEIVINGCALL: // Yes! Someone is calling us
        //        Serial.println(RECEIVING_CALL);
        call_number = get_call_number();
        lcd.clear();
        lcd.print(F("Receiving call"));
        lcd.setCursor(0, 1);
        Serial.println(call_number);
        lcd.print(call_number);
        hangcall();
        delay(1500);
        numtel = call_number;
        lcd.clear();
        lcd.print(F("Sending SMS"));
        sendsms(F("Number configured."), numtel);
        lcd.clear();
        lcd.print(F("SMS sent.."));
        no_configured = 1;
        lcd.clear();
        lcd.print(F("Energymeterwith"));
        lcd.setCursor(0, 1);
        lcd.print(F(" Load Control "));
        delay(2000);
    }
    
  }
  Timer1.initialize(1000000);                      // Initialize TimerOne library for the freq we need
  Timer1.attachInterrupt(estimate, 1000000);
  attachInterrupt(0, meterpulse_detect, FALLING);
  delay(1000);
}

void  meterpulse_detect()
{
  cost = cost + x / 1600;
  unit = (unit + 0.000625);
  trigger++;
}
void estimate()
{
  //  current_use=unit;
  //  total_use=current_use-last_use;
  //  sec++;
  if (trigger == 1)
  {
    //    last_use=total_use;
    //total_use=0;
    sec++;
  }
  else if (trigger == 2)
  {
    trigger = 0;
    pulse_time = sec;
  }
}
void loop()
{
  while (1)
  {
    while (menu == 1)
    {
      if (menu_sel == 1)
      {
        lcd.clear();
        lcd.print(F("->>1.Start"));
        lcd.setCursor(0, 1);
        lcd.print(F("   2.Setting"));
      }
      else if (menu_sel == 2)
      {
        lcd.clear();
        lcd.print(F("   1.Start"));
        lcd.setCursor(0, 1);
        lcd.print(F("->>2.Setting"));
      }
      if (digitalRead(entr) == LOW)
        menu = 0;
      else if (digitalRead(up) == 0)
        menu_sel = 1;
      else if (digitalRead(dwn) == 0)
        menu_sel = 2;

      delay(300);
    }
    if (menu_sel == 1)
    {
      // lcd.clear();
      // lcd.print(F("Initiallizing......."));
      // delay(500);
      // lasttime = millis();
      while (digitalRead(bck) == HIGH)
      {
        lcd.clear();
        lcd.print("UNITS:");
        lcd.setCursor(0, 1);
        lcd.print("COST: ");
        lcd.setCursor(6, 0);
        lcd.print(unit, 4);
        lcd.print("Kwh   ");
        lcd.setCursor(6, 1);
        lcd.print(cost, 4);
        if (sms_available(sms_num, msg))
        {
          lcd.clear();
          lcd.print(sms_num);
          lcd.setCursor(0, 1);
          lcd.print(msg);
          delay(2000);
          checksms(sms_num, msg);
        }
        delay(400);
      }
      menu = 1;
      menu_sel = 1;
      //e_chk1 = 0;
      //e_chk2 = 0;
      delay(500);
    }
    if (menu_sel == 2)
    {
      lcd.clear();
      lcd.print("Set unit cost");
      lcd.setCursor(5, 1);
      lcd.print(x);
      delay(1000);
      while (digitalRead(entr) == HIGH)
      {
        lcd.setCursor(5, 1);
        lcd.print(x);
        if (digitalRead(up) == LOW)
        {
          x = x + 0.1;
          delay(200);
        }
        else if ((digitalRead(dwn) == LOW) && (x > 0))
        {
          x = x - 0.1;;
          delay(200);
        }
      }
      delay(500);
      menu = 1;
    }
  }
}
/*
    currenttime=millis();
    if((currenttime-lasttime) >= interval)
    {
      lasttime = currenttime;
      gps_track(0);
    }
    lcd.clear();
    lcd.print(F("Beats/minute:"));
    lcd.print(beats);
    lcd.setCursor(0,1);
    lcd.print(F("Temp:"));
    lcd.print(tempC);
    lcd.print(F("\337C"));
    hbt();
    if(beats < x)
    {
      e_chk2 = 0;
      e_chk1++;
      if(e_chk1 >= 5)
      {
        tone(buzzer,50,5000);
        lcd.clear();
        lcd.print(F("heart beats are"));
        lcd.setCursor(0, 1);
        lcd.print("LOW");
        delay(2000);
        if((beats < x) && (smssend==0))
        {
          sendsms(F("heart beats are LOW"),numtel);
          smssend=1;
        }
         e_chk1 = 0;
      }
     }
    else if(beats > y)
    {
      e_chk1 = 0;
      e_chk2++;
      if(e_chk2 >= 5)
      {
        tone(buzzer,50,5000);
        lcd.clear();
        lcd.print(F("heart beats are"));
        lcd.setCursor(0, 1);
        lcd.print("HIGH");
        delay(2000);
        if((beats > y) && (smssend==0))
        {
          sendsms(F("heart beats are HIGH"),numtel);
          smssend=1;
        }
         e_chk2 = 0;
      }
     }
     else
     {
      e_chk1 = 0;
      e_chk2 = 0;
      smssend=0;
     }
     if(digitalRead(HELP) == LOW)
     {
      distress = 1;
      break;
     }
  }
   menu = 1;
   menu_sel = 1;
   delay(500);
  }

  if(menu_sel == 2 && distress == 0)
  {
  lcd.clear();
  lcd.print(F("Set lower limit"));
  lcd.setCursor(8,1);
  lcd.print(x);
  delay(1000);
  while(digitalRead(entr) == HIGH)
  {
    lcd.setCursor(8,1);
    lcd.print(x);
    if (digitalRead(up) == LOW)
    {
      x = x+10;
      if(x>70)
      {
        x=30;
      }
      delay(200);
    }
    else if(digitalRead(dwn) == LOW)
    {
      x = x-10;
      if(x<30)
      {
        x=70;
      }
      delay(200);
    }
  }
  delay(500);

  lcd.clear();
  lcd.print(F("Set higher limit"));
  lcd.setCursor(8,1);
  lcd.print(y);
  lcd.print("  ");
  while(digitalRead(entr) == HIGH)
  {
    lcd.setCursor(8,1);
    lcd.print(y);
    lcd.print("  ");
    if (digitalRead(up)==LOW)
    {
      y = y+10;
      if(y>200)
      {
        y=70;
      }
      delay(500);
    }
    else if(digitalRead(dwn) == LOW)
    {
      y = y-10;
      if(y<70)
      {
        y=200;
      }
      delay(500);
    }
  }
  delay(500);

  menu = 1;
  }

  if(distress == 1 || digitalRead(HELP) == LOW)
  {
  gps_track(1);
  lcd.clear();
  lcd.print(F("Distress Signal"));
  lcd.setCursor(0,1);
  lcd.print("Sent!");
  while(digitalRead(bck) == HIGH);
  menu = 1;
  distress = 0;
  while(digitalRead(bck) == HIGH);
  }
  }
  }
*/
/*
  void hbt()
  {
  int k=0;
  long t_out1 = millis();
  bool zero = false;
  while(k<10)
  {
   if(digitalRead(HR_RX))
   {
    t_out1 = millis();
    if(k==0)
    time1=millis();
    k++;
    while(digitalRead(HR_RX));
   }
    if(millis() - t_out1 > 2000)
    {
      zero = true;
      break;
    }
  }
  if(!zero)
  {
    time2=millis();
    beats=time2-time1;
    beats=beats/10;
    beats=60000/beats;
    if(beats >= 200)
    {
      beats = last_rate;
    }
  //    lcd.clear();
  }
  else
  {
    k=0;
    beats=0;
  }
  lcd.clear();
  lcd.print(F("Beats/minute:"));
  lcd.print(beats);
  lcd.print("   ");
  last_rate = beats;
  k=0;
  temp();
  }

  void temp()
  {
  reading = analogRead(tempPin);
  tempC = reading / 9.31;
  lcd.setCursor(0,1);
  lcd.print(F("Temp:"));
  lcd.print(tempC);
  lcd.print("\337C");
  if(tempC>=40)
  {
    lcd.clear();
    lcd.print("Temperature is ");
    lcd.setCursor(0, 1);
    lcd.print("HIGH");
    tone(buzzer,50,3000);
    delay(1000);
    sendsms(F("Temperature is HIGH"),numtel);
  }
  else if(tempC<=23)
  {
    lcd.clear();
    lcd.print(F("Temperature is "));
    lcd.setCursor(0, 1);
    lcd.print("LOW");
    tone(buzzer,50,3000);
    delay(1000);
    sendsms(F("Temperature is LOW"),numtel);
  }
  delay(10);
  }

  void gps_track(int mode)
  {
  lcd.clear();
  lcd.print(F("tracking..."));
  char char1[10],char2[10],char3[5],char4[7];
  String slat,slon,msg,sbeat,stemp;
  lat_int = 0;
  lon_int = 0;
  delay(1500);
  indata = sendcmd("AT+CGNSINF",1);
  if(indata.indexOf("+CGNSINF:")>=0)
  {
    Serial.print("indata:" );
    Serial.println(indata);
    int index1 = indata.indexOf(',');
    String s2 = indata.substring(index1+1);
    index1 = s2.indexOf(',');
    s2 = s2.substring(index1+1);
    index1 = s2.indexOf(',');
    s2 = s2.substring(index1+1);
    Serial.println(s2);
    int index2 = s2.indexOf(',');
    slat = s2.substring(0,index2 - 1);
    Serial.print("lat = ");
    lat_int = slat.toFloat();
    Serial.println(lon_int);
    String s3 = s2.substring(index2+1);
    Serial.println(s3);
    int index3 = s3.indexOf(',');
    slon = s3.substring(0,index3 - 1);
    lon_int = slon.toFloat();
    Serial.print("lon = ");
    Serial.println(lon_int);
  }
  if(!(lat_int>0) && !(lon_int>0))
  {
      lcd.clear();
      lcd.print(F("gps not working.."));
      //msg="GPS not Working...";
      if(mode==0)
      mode=3;
      else if(mode==1)
      mode=4;
      goto down;
  }
    lcd.clear();
    lcd.print("LAT=");
    lcd.print(slat);
    lcd.setCursor(0,1);
    lcd.print("LON=");
    lcd.print(slon);
  down: dtostrf(beats, 0, 0, char3);
    sbeat=String(char3);
    dtostrf(tempC, 2, 2, char4);
    stemp=String(char4);
    if(mode==0)
    {
      msg ="HR=" + sbeat + "\nTemp=" + stemp + site + slat + "," + slon + "&z=16";
    }
    else if(mode==1)
    {
      msg="Soldier need help" + site + slat + "," + slon + "&z=16";
    }
    else if(mode==3)
    {
      msg ="HR=" + sbeat + "\nTemp=" + stemp + "\ngps not working..";
    }
    else if(mode==4)
    {
      msg= help1 + "gps not working..";
    }
    delay(2000);
    sendsms(msg,numtel);
  }
*/
void checksms(String sms_number, String msg)
{
  if ((msg.startsWith(F("1"))) && (sms_number.indexOf(numtel) >= 0))
  {
    if (load1_satus == 0)
    {
      digitalWrite(load1, HIGH);
      load1_satus = 1;
    }
    else if (load1_satus == 1)
    {
      digitalWrite(load1, LOW);
      load1_satus = 0;
    }
    // lcd.clear();
    // lcd.print(F("sending status"));
    //  delay(1500);
    // gps_track(0);
  }
  else if ((msg.startsWith(F("2"))) && (sms_number.indexOf(numtel) >= 0))
  {
    if (load2_satus == 0)
    {
      digitalWrite(load2, HIGH);
      load2_satus = 1;
    }
    else if (load2_satus == 1)
    {
      digitalWrite(load2, LOW);
      load2_satus = 0;
    }
  }
  else if ((msg.startsWith(F("3"))) && (sms_number.indexOf(numtel) >= 0))
  {
    if (load3_satus == 0)
    {
      digitalWrite(load3, HIGH);
      load3_satus = 1;
    }
    else if (load3_satus == 1)
    {
      digitalWrite(load3, LOW);
      load3_satus = 0;
    }
  }
  else if ((msg.startsWith(F("4"))) && (sms_number.indexOf(numtel) >= 0))
  {
    if (load4_satus == 0)
    {
      digitalWrite(load4, HIGH);
      load4_satus = 1;
    }
    else if (load4_satus == 1)
    {
      digitalWrite(load4, LOW);
      load4_satus = 0;
    }
  }

  else if ((msg.startsWith(F("HEstimate"))) && (sms_number.indexOf(numtel) >= 0))
  {
    Serial.println("HEstimate");

    int index = msg.lastIndexOf('e');
    int index3 = index + 3;
    String MSS = msg.substring(index + 1, index3);
    Serial.println("MSS: " + MSS);
    int hours = MSS.toInt();
    Serial.println(hours);

    lcd.clear();
    lcd.print(F("calculating "));
    lcd.setCursor(0, 1);
    lcd.print(F("estimate for "));
    lcd.print(hours);
    lcd.print(F("h"));
    delay(2000);
    estimated_uses = ((2.25 / pulse_time) * hours);      
    estimated_cost = (estimated_uses * x);
   // Serial.println(estimated_uses);
   // Serial.println(estimated_cost);
    lcd.clear();
    lcd.print(estimated_uses, 2);
    lcd.print(F("kwh"));
    lcd.setCursor(0, 1);
    lcd.print(estimated_cost, 2);

    String HESTIMATE_MSG = "Estimate use= " + String(estimated_uses, 2) + "Estimate cost= " + String(estimated_cost, 2);
    sendsms(HESTIMATE_MSG, numtel);
    //       sms.beginSMS(numtel);
    //       sms.print("Estimate use= ");
    //       sms.println(estimated_uses, 2);
    //       sms.print("Estimate cost= ");
    //       sms.print(estimated_cost, 2);
    //       sms.endSMS();
    delay(100);
    lcd.clear();
    lcd.print(F("sms send"));
    //      }
    //      else
    //      {
    //       lcd.clear();
    //       lcd.print(F("INVALID MESSAGE"));
    //      }*/
  }
  

  else if ((msg.startsWith(F("DEstimate"))) && (sms_number.indexOf(numtel) >= 0))
  {
    Serial.println("DEstimate");
    int index = msg.lastIndexOf('e');
    int index3 = index + 3;
    String MSS = msg.substring(index + 1, index3);
    Serial.println("MSS: " + MSS);
    int days = MSS.toInt();
    Serial.println(days);
    //    int index = indata.lastIndexOf('e');
    /*for (int j = index + 1; j <= (indata - 1); j++)
        {
          if (((int)indata[j] >= 48) && ((int)indata[j] <= 59))
            valid_sms = true;
          else
            valid_sms = false;
        }
        if ( valid_sms == true)
        {
          valid_sms = false;
          int days = ((indata[index + 1] - '0') * 10) + ((indata[index + 2] - '0'));
          // delay(200);*/
    lcd.clear();
    lcd.print(F("calculating "));
    lcd.setCursor(0, 1);
    lcd.print(F("estimate for "));
    lcd.print(days);
    lcd.print(F("d"));
    delay(2000);
    estimated_uses = ((2.25 / pulse_time) * 24 * days);
    estimated_cost = (estimated_uses * x);
    //Serial.println(estimated_uses);
    //Serial.println(estimated_cost);
    lcd.clear();
    lcd.print(estimated_uses);
    lcd.print(F("kwh"));
    lcd.setCursor(0, 1);
    lcd.print(estimated_cost, 2);
    delay(2000);
    String DESTIMATE_MSG = "Estimate use= " + String(estimated_uses, 2) + "Estimate cost= " + String(estimated_cost, 2);
    sendsms(DESTIMATE_MSG, numtel);
    //          sms.beginSMS(numtel);
    //          sms.print("Estimate use= ");
    //          sms.println(estimated_uses, 2);
    //          sms.print("Estimate cost= ");
    //          sms.print(estimated_cost, 2);
    //          sms.endSMS();
    delay(100);
    lcd.clear();
    lcd.print(F("sms send"));
    delay(2000);


  }
  else
  {
    lcd.clear();
    lcd.print(F("INVALID MESSAGE")); 
  }
    
}